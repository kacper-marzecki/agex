
(defmodule App.Example
  (alias App.Example.Types
         App.ErrorChecker)  

  (defn parse 
    ([string] (Types.Result Types.Errors integer))
     [input]  (let [error_fn (ErrorChecker.unfortunate_error_checker "13") 
                    lucky_string "42"
                    a %{1 2 3 4}
                    lucky_number 42] 
                (case input
                  ((^ lucky_string) {:ok lucky_number})
                  (other {:error (error_fn input)}))))
  

    (defn match_map
    ([] (| 1 2 3)) 
     []  (let [ map %{:value 1 
                    :nested_map %{ 1 "one" 
                                  "string_key" {:tuple_elem 2}}}] 
                (case map
                  (%{:nested_map %{"string_key" {_ x}}} x)
                  (other 1))))
)

(defmodule App.ErrorChecker

  (defn unfortunate_error_checker 
      ([string] (fn [string] (| :other_error :unfortunate_error)))
      [unlucky_string] 
        (fn [str]
          (if (== str unlucky_string) 
                              :unfortunate_error 
                              :other_error))))

(defmodule App.Example.Types
  (alias App.Example.Types)
  (deftype Result  
    (forall [err suc] 
      (| {:ok suc}
         {:error err})))
  (deftype Errors (| :unfortunate_error 
                     :other_error 
                     :other_error 
                     :yet_another_error )))




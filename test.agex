
(defmodule App.Example
  (alias App.Example.Types
         App.ErrorChecker)  

  (defn parse 
    ([string] (Types.Result integer Types.Errors))
     [input]  (let [error_fn (ErrorChecker.unfortunate_error_checker "13") 
                    lucky_string "42"
                    lucky_number 42] 
                (if (= input lucky_string) 
                  {:ok lucky_number}
                  {:error (error_fn input)})))

  )

(defmodule App.ErrorChecker
  (defn unfortunate_error_checker 
      ([string] (fn [string] (| :other_error :unfortunate_error)))
      [unlucky_string] 
        (fn [str]
          (if (= str unlucky_string) 
                              :unfortunate_error 
                              :other_error))))

(defmodule App.Example.Types
  (alias App.Example.Types)
  (deftype Result  
    (forall [a b] 
      (| {:ok a}
         {:error b})))
  (deftype Errors (| :unfortunate_error 
                     :other_error 
                     :yet_another_error )))



